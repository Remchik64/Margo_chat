import streamlit as st
from tinydb import TinyDB, Query
import requests
import hashlib
from streamlit_extras.switch_page_button import switch_page
from googletrans import Translator
import os
import base64
from PIL import Image
import html

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
if "authenticated" not in st.session_state or not st.session_state.authenticated:
    switch_page("registr")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
chat_db = TinyDB('chat_history.json')
user_db = TinyDB('user_database.json')

# –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø—Ä–æ—Ñ–∏–ª—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å)
PROFILE_IMAGES_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'profile_images'))
ASSISTANT_ICON_PATH = os.path.join(PROFILE_IMAGES_DIR, 'assistant_icon.png')  # –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
if os.path.exists(ASSISTANT_ICON_PATH):
    try:
        assistant_avatar = Image.open(ASSISTANT_ICON_PATH)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        assistant_avatar = "ü§ñ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
else:
    assistant_avatar = "ü§ñ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_profile_image(username):
    User = Query()
    user_data = user_db.search(User.username == username)
    if user_data:
        user_data = user_data[0]
        if user_data.get('profile_image'):
            image_path = user_data['profile_image']
        else:
            image_path = os.path.join(PROFILE_IMAGES_DIR, "default_user_icon.png")
    else:
        image_path = os.path.join(PROFILE_IMAGES_DIR, "default_user_icon.png")

    #st.write(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

    if os.path.exists(image_path):
        try:
            return Image.open(image_path)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
            return "üë§"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    else:
        st.error(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return "üë§"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_generations():
    User = Query()
    user_data = user_db.search(User.username == st.session_state.username)
    if not user_data:
        return 0
    return user_data[0].get('generations', 0)

if 'available_generations' not in st.session_state:
    st.session_state.available_generations = get_user_generations()

def update_user_generations(used_generations):
    User = Query()
    current_generations = get_user_generations()
    new_generations = max(current_generations - used_generations, 0)
    user_db.update({'generations': new_generations}, User.username == st.session_state.username)
    st.session_state.available_generations = new_generations

def get_message_hash(role, content):
    return hashlib.md5(f"{role}:{content}".encode()).hexdigest()

def submit_question():
    user_input = st.session_state.get('user_input', '')
    if not user_input:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
        return

    payload = {"question": user_input}
    available_generations = get_user_generations()
    if available_generations <= 0:
        st.warning("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π. –ü–æ–∂–ª—É–π—Å—Ç–∞, –∫—É–ø–∏—Ç–µ –±–æ–ª—å—à–µ.")
        return

    response = requests.post('https://flowise-renataraev64.amvera.io/api/v1/prediction/99bea477-b813-4f64-a240-b3f85c5d2b2c', json=payload)
    output = response.json()

    if 'text' not in output:
        st.warning("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.")
        return

    response_text = output['text']
    translated_text = translate_text(response_text)
    if not translated_text:
        st.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –æ—Ç–≤–µ—Ç–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    user_hash = get_message_hash("user", user_input)
    assistant_hash = get_message_hash("assistant", translated_text)

    if "message_hashes" not in st.session_state:
        st.session_state.message_hashes = set()

    if user_hash not in st.session_state.message_hashes:
        st.session_state.message_hashes.add(user_hash)
        user_avatar = get_user_profile_image(st.session_state.username)
        with st.chat_message("user", avatar=user_avatar):
            st.write(user_input)
        chat_db.insert({"role": "user", "content": user_input})

    if assistant_hash not in st.session_state.message_hashes:
        st.session_state.message_hashes.add(assistant_hash)
        with st.chat_message("assistant", avatar=assistant_avatar):
            create_copy_button(translated_text, f"new_msg_{len(st.session_state.message_hashes)}")
        chat_db.insert({"role": "assistant", "content": translated_text})

    update_user_generations(1)
    st.rerun()

def translate_text(text):
    try:
        from googletrans import Translator
        translator = Translator()
        translation = translator.translate(text, dest='ru')
        return translation.text
    except:
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

def clear_chat_history():
    chat_db.truncate()  # –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if "message_hashes" in st.session_state:
        del st.session_state["message_hashes"]  # –°–±—Ä–æ—Å —Ö—ç—à–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π

def create_copy_button(text, key):
    with st.container():
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        st.write(text)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        show_key = f"show_{key}"
        if show_key not in st.session_state:
            st.session_state[show_key] = False
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.checkbox –≤–º–µ—Å—Ç–æ st.button
        st.session_state[show_key] = st.checkbox(
            "üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", 
            value=st.session_state[show_key],
            key=f"toggle_{key}"
        )
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–∫–∞–∑
        if st.session_state[show_key]:
            st.code(text, language=None)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("–¢–∞—Ä–æ-–ú–∞—Ä–≥–æ")
st.sidebar.write(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {st.session_state.available_generations}")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
if st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
    clear_chat_history()
    st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
is_admin = st.session_state.get('is_admin', False)

# –î–æ–±–∞–≤–∏–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ —Å–∞–π–¥–±–∞—Ä
if is_admin:
    st.sidebar.header("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    if st.sidebar.button("–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã"):
        chat_db.truncate()
        st.rerun()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
chat_history = chat_db.all()
for idx, msg in enumerate(chat_history):
    if msg["role"] == "user":
        avatar = get_user_profile_image(st.session_state.username)
        with st.chat_message(msg["role"], avatar=avatar):
            st.write(msg["content"])
    else:
        avatar = assistant_avatar
        with st.chat_message(msg["role"], avatar=avatar):
            create_copy_button(msg["content"], f"msg_{idx}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–ª–∞–≥–∞ –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if 'clear_input' not in st.session_state:
    st.session_state.clear_input = False

# –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
default_value = "" if st.session_state.clear_input else st.session_state.get('user_input', '')

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å —Ñ–æ—Ä–º–æ–π
with st.form(key='question_form'):
    user_input = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å",
        value="",
        key="user_input",
        height=100,
        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å...",
        help="–ù–∞–∂–º–∏—Ç–µ Ctrl+Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
    )
    submit_button = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")

if submit_button and user_input:
    submit_question()
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—á–∏—Å—Ç–∫–∏
    st.session_state.clear_input = False

st.write(f"Streamlit version: {st.__version__}")

if "clipboard" not in st.session_state:
    st.session_state.clipboard = ""